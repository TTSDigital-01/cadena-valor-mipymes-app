// prisma/schema.prisma

// Este es tu archivo de esquema de Prisma.
// Aprende más sobre ello en la documentación: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============== MODELOS DE LA APLICACIÓN ==================

model User {
  id            String         @id @default(cuid()) // Identificador único para el usuario (generado automáticamente)
  email         String         @unique // Correo electrónico del usuario, debe ser único para el login
  passwordHash  String         // Contraseña encriptada (campo que usaremos para el login manual)
  role          String         @default("MIPYME_USER") // Rol del usuario (ej. "MIPYME_USER", "ADMIN", "ADVISOR")

  name          String?        // Nombre opcional del usuario

  // Campos adicionales que NextAuth.js podría usar si configuras proveedores OAuth
  // Si no vas a usar proveedores OAuth (Google, Facebook, etc.) y solo usas login/registro con email y contraseña,
  // puedes mantener estos campos comentados o eliminarlos para simplificar.
  // Pero si en el futuro los usas, NextAuth.js los buscará.
  emailVerified DateTime?
  image         String?

  // Relaciones con otros modelos
  organizations Organization[] // Un usuario puede tener múltiples organizaciones asociadas
  accounts      Account[]      // Relación con el modelo Account de NextAuth.js (para proveedores OAuth)
  sessions      Session[]      // Relación con el modelo Session de NextAuth.js (para el manejo de sesiones)
}

model Organization {
  id               String         @id @default(cuid()) // Identificador único para la organización (generado automáticamente)
  userId           String         // ID del usuario al que pertenece esta organización (foreign key)
  user             User           @relation(fields: [userId], references: [id]) // Relación con el modelo User

  name             String         // Nombre de la Mipyme
  sector           String?        // Sector de la Mipyme (opcional)
  productsServices String?        @map("products_services") // Productos/Servicios ofrecidos (se mapea a 'products_services' en la DB)
  mission          String?        // Misión actual de la Mipyme (opcional)
  vision           String?        // Visión actual de la Mipyme (opcional)

  createdAt        DateTime       @default(now()) // Fecha de creación del registro
  updatedAt        DateTime       @updatedAt      // Fecha de la última actualización del registro

  // --------------- Relaciones futuras para la metodología (se irán construyendo) ---------------
  // Estos campos están comentados TEMPORALMENTE para que la migración inicial funcione.
  // Los descomentaremos y definiremos sus respectivos modelos en fases posteriores.
  // chainValueActivities ChainValueActivity[]
  // analysesFoda         AnalysisFoda[]
  // analysesPestel       AnalysisPestel[]
  // strategies           Strategy[]
  // strategicObjectives  StrategicObjective[]

  @@map("organizations") // Nombre de la tabla en la base de datos será 'organizations' (minúsculas y plural)
}


// ============== MODELOS DE NEXTAUTH.JS ==================
// Estos modelos son necesarios para que NextAuth.js maneje la autenticación y las sesiones
// utilizando Prisma como su base de datos. No los modifiques a menos que se indique explícitamente.

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}